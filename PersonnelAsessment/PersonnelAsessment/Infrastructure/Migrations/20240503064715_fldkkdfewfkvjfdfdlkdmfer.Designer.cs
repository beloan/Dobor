// <auto-generated />
using System;
using Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240503064715_fldkkdfewfkvjfdfdlkdmfer")]
    partial class fldkkdfewfkvjfdfdlkdmfer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins", "private");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin1@ymail.com",
                            Password = "wVHAesBpD3fGGREvMkCqyyHABbgjeU22v2OdcQ8M+Jo=",
                            Salt = new byte[] { 14, 219, 106, 150, 6, 252, 1, 234, 149, 170, 167, 133, 176, 226, 192, 211 }
                        });
                });

            modelBuilder.Entity("Domain.Entities.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("FormNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SubjectNameId");

                    b.ToTable("Curriculums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormNumber = 1,
                            Hours = 10,
                            OrganisationId = 1,
                            SubjectNameId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassroomTeacherId")
                        .HasColumnType("integer");

                    b.Property<char>("Litera")
                        .HasColumnType("character(1)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassroomTeacherId = 3,
                            Litera = ' ',
                            Number = 1,
                            OrganisationId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonId = 1,
                            StudentId = 2,
                            Value = "5"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("Homework")
                        .HasColumnType("text");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 4, 10),
                            FormId = 1,
                            Homework = "Купить мышьяк",
                            SubjectId = 1,
                            Topic = "Устройство сердца"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int>("IndexNum")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = "Monday",
                            FormId = 1,
                            IndexNum = 1,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SubjectNameId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrganisationId = 1,
                            SubjectNameId = 1,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.SubjectName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubjectNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Биология"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Domain.Entities.WorkProgramm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FormNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("WorkProgramms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 4, 10),
                            FormNumber = 1,
                            SubjectId = 1,
                            Topic = "Изучение крыс"
                        });
                });

            modelBuilder.Entity("OrganisationTeacher", b =>
                {
                    b.Property<int>("OrganisationsId")
                        .HasColumnType("integer");

                    b.Property<int>("TeachersId")
                        .HasColumnType("integer");

                    b.HasKey("OrganisationsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Workers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.ToTable("Organisations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "niyaz_imamov.04@mail.ru",
                            IsActivated = true,
                            Password = "eKPL44bLuWH5mJJbVH2vbTcXdwDjm8Fb4CIHB0NZ8S0=",
                            Role = "organisation",
                            Salt = new byte[] { 58, 94, 103, 112, 230, 149, 61, 51, 48, 95, 116, 77, 14, 106, 8, 70 }
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.HasIndex("FormId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "niyaz_student@example.ru",
                            IsActivated = true,
                            Password = "ABvKZwAsbcFGPDmhT1elWoFPIQUPp+MZO9Vt1eiukkI=",
                            Role = "student",
                            Salt = new byte[] { 53, 104, 17, 236, 74, 82, 90, 207, 169, 201, 221, 58, 24, 250, 69, 58 },
                            FIO = "Зубенко Михаил Петрович",
                            FormId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Education")
                        .HasColumnType("text");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "niyaz_teacher@example.ru",
                            IsActivated = true,
                            Password = "mMTQiS0BjDcIwRpa7Z9QxBheAz/KOKG832xMCYqdyt4=",
                            Role = "teacher",
                            Salt = new byte[] { 174, 156, 101, 39, 72, 119, 148, 98, 42, 83, 2, 59, 168, 117, 76, 155 },
                            FIO = "Александр Македонский"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Curriculum", b =>
                {
                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany("Curriculums")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SubjectName", "SubjectName")
                        .WithMany("Curriculums")
                        .HasForeignKey("SubjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("SubjectName");
                });

            modelBuilder.Entity("Domain.Entities.Form", b =>
                {
                    b.HasOne("Domain.Entities.Teacher", "ClassroomTeacher")
                        .WithMany("Forms")
                        .HasForeignKey("ClassroomTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany("Forms")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassroomTeacher");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Domain.Entities.Grade", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Grades")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.Form", "Form")
                        .WithMany("Lessons")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.Form", "Form")
                        .WithMany("Schedules")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Form");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.HasOne("Domain.Entities.Organisation", "Organisation")
                        .WithMany("Subjects")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SubjectName", "SubjectName")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("SubjectName");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WorkProgramm", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("WorkProgramms")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OrganisationTeacher", b =>
                {
                    b.HasOne("Domain.Entities.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Organisation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Form", "Form")
                        .WithMany("Students")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Form", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Schedules");

                    b.Navigation("WorkProgramms");
                });

            modelBuilder.Entity("Domain.Entities.SubjectName", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Entities.Organisation", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("Forms");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Forms");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
